#!/bin/zsh

### Based on this https://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html


trap clean_up 1 2 3 15
trap die 1 2 3 15

# --- Make sure script dies - this is overkill
die()
{
    exit 111
}

printHelp()
{
echo -e """—————————————————————————
Usage example:
—————————————————————————

  hqGif ~/Videos/<videofile.ext> -scale 520 -scf bicubic -dir ~/Pictures -name lol

Result:

  ~/Pictures/lol.gif

--------------------

-name

  Sets output filename from original filename to given string (e.g. "lol")
  .gif is appended automatically

-dir

  Sets output directory to ~/Pictures

-scale 520

  Makes a 520px scaled gif from ~/Videos/<videofile.ext>

-scf bicubic

  Use bicubic scaling (lancoz by default)


—————————————————————————
Available argument flags:
—————————————————————————

--folder|-dir
    Set output directory

--name|-name|-n|-o
    Set name of output gif
    .gif is appendeda automatically

--scale_flag|-scf
    String to set scale flag
    e.g bicub or lancoz

--scale|-scale|-s|-sz|-sc|-size
    Set size of output gif
    example: -s 520

--start-time|-st|-ss
    Set start time of videoclip to make gif from

--duration|-d|-t
    Set duration of clip

--frames-per-second|-fps|--fps
    Set gif fps - higher is smoother, but filesize is larger
    default is 10 fps
"""

}



# --- Check if there are any arguments

if [[ -z $@ ]]
then
    echo "no arguments"

else
    originalFile="$1"
    name="${originalFile##*/}"
    name="${name%.*}"

    start_time=0
    duration=0
    fps=10
    scale=540
    scale_flags="lanczos"
    stats_mode=diff
    # stats_mode=full
    new_folder=""

    # --- Check if there are more arguments than just original file

    while [[ ${#@} > 0 ]]
    do
        if [[ ${1:0:1} = "-" ]]
        then
            case "$1" in
            --start-time|-st|-ss)
                shift
                start_time="$1"
            ;;
            --duration|-d|-t)
                shift
                duration="$1"

            ;;
            --frames-per-second|-fps|--fps)
                shift
                fps="$1"

            ;;
            --scale|-scale|-sc|-size)
                shift
                scale="$1"

            ;;
            --scale-flag|-scf)
                shift
                case "$1" in
                la|lan|lc|lcz|lz)
                    scale_flags="lanczos"
                ;;
                bi|bic)
                    scale_flags="bicubic"
                ;;
                *)
                    scale_flags="$1"
                ;;
                esac

            ;;
            --stats-mode|-sm|-smode)
                shift
                stats_mode="$1"

            ;;
            --filters|-f)
                shift
                filters="$1"
            ;;
            --name|-name|-n|-o)
                shift
                case "$1" in
                *.gif)
                    name="${1%.*}"
                ;;
                *)
                    name="$1"
                ;;
                esac
            ;;
            --help|-h)
                printHelp
                exit 0
            ;;
            --folder|-dir)
                shift
                case "$1" in
                PWD|pwd)
                    new_folder="$PWD"
                ;;
                *)
                    new_folder="$1"
                ;;
                esac
            ;;
            esac
        fi
        shift
    done

    if [[ $new_folder != "" ]]
    then
        folder="$new_folder"
    else
        folder="${originalFile%/*}"
        folder="${folder}"
    fi

    if [[ -w "${folder}" ]]
    then

        # --- Function to create the temporary palette
    
        make_temp_palette(){
            TEMP=$(mktemp -t $name-$$.XXXXXXXXXX.png)
        }
    
        # --- Function to delete the temporary palette
    
        clean_up() {
    
            # [[ -f $TEMP ]] && echo "TEMP EXISTS" || echo "TEMP DOES NOT EXIST"
            rm "$TEMP" >/dev/null 2>&1
            # [[ -f $TEMP ]] && echo "TEMP EXISTS" || echo "TEMP DOES NOT EXIST"
        }

        cd "$folder"
        make_temp_palette
        palette="$TEMP"
        filters="fps=$fps,scale=$scale:-1:flags=$scale_flags"
        out_file="${folder}/${name}.gif"

        if [[ -f $out_file ]]
        then
            counter=1
            out_new="${out_file%.*} ($counter).gif"
            while [[ -f $out_new ]]
            do
                ((counter++))
                out_new="${out_file%.*} ($counter).gif"
            done
            out_file="$out_new"
        fi

        echo -e "\nNew GIF:\n$out_file\n"

        if [[ $start_time = 0 && $duration = 0 ]]
        then
            ffmpeg \
                -v warning \
                -i "$originalFile" \
                -vf "$filters,palettegen=stats_mode=$stats_mode" \
                -y $palette

            ffmpeg \
                -v warning \
                -i "$originalFile" \
                -i $palette \
                -lavfi "$filters [x]; [x][1:v] paletteuse" \
                -y "$out_file"

        elif [[ $start_time > 0 && $duration = 0 ]]
        then
            ffmpeg \
                -v warning \
                -ss $start_time \
                -i "$originalFile" \
                -vf "$filters,palettegen=stats_mode=$stats_mode" \
                -y $palette

            ffmpeg \
                -v warning \
                -ss $start_time \
                -i "$originalFile" \
                -i $palette \
                -lavfi "$filters [x]; [x][1:v] paletteuse" \
                -y "$out_file"

        elif [[ $start_time > 0 && $duration > 0 ]]
        then
            ffmpeg \
                -v warning \
                -ss $start_time \
                -t $duration \
                -i "$originalFile" \
                -vf "$filters,palettegen=stats_mode=$stats_mode" \
                -y $palette

            ffmpeg \
                -v warning \
                -ss $start_time \
                -t $duration \
                -i "$originalFile" \
                -i $palette \
                -lavfi "$filters [x]; [x][1:v] paletteuse" \
                -y "$out_file"
        fi
        clean_up
    fi
fi
