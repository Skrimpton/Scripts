#!/bin/zsh

### Based on this https://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html


printHelp()
{
echo -e """————————————————————
Usage example:
————————————————————

    hqGif <videofile.ext> -scale 520 -scf bicubic -dir ~/Pictures -name lol

Result:
    ~/Pictures/lol/lol.gif
      - -scale 520 : makes a 520px scaled gif named \"lol.gif\"  made from <videofile.ext> 
      - -scf bicubic : use bicubic scaling (lancoz by default)

————————————————————
Available arguments:
————————————————————

--folder|-dir
    Set output directory
--name|-n|-o
    Set name of output gif
--start-time|-st|-ss
    Set start time of videoclip to make gif from
--duration|-d|-t
    Set duration of clip
--frames-per-second|-fps|--fps
    Set gif fps - higher is smoother, but filesize is larger
    default is 10 fps

————————————————————
Caveats:
————————————————————

Files are put in folders to avoid name clashing/issues during creation and removal of files - i.e. the automatically removed palette.png
I am currently not using /tmp/palette.png solution to avoid clashing if serializing the command
"""
# TODO use mktemp - $RANDOM and trap cleanup

}
# --- Check if there are any arguments

if [[ -z $@ ]]
then
    echo "no arguments"

else
    originalFile="$1"
    name="${originalFile##*/}"
    name="${name%.*}"

    start_time=0
    duration=0
    fps=10
    scale=540
    stats_mode=diff
    # stats_mode=full
    new_folder=""
    # --- Check if there are more arguments than just original file

    while [[ ${#@} > 0 ]]
    do
        if [[ ${1:0:1} = "-" ]]
        then
            case "$1" in
            --start-time|-st|-ss)
                shift
                start_time="$1"
            ;;
            --duration|-d|-t)
                shift
                duration="$1"

            ;;
            --frames-per-second|-fps|--fps)
                shift
                fps="$1"

            ;;
            --scale|-scale|-sc|-size)
                shift
                scale="$1"

            ;;
            --stats-mode|-sm|-smode)
                shift
                stats_mode="$1"

            ;;
            --name|-n|-o)
                shift
                case "$1" in
                *.gif)
                    name="${1%.*}"
                ;;
                *)
                    name="$1"
                ;;
                esac
            ;;
            --help|-h)
                printHelp
                exit 0
            ;;
            --folder|-dir)
                shift
                case "$1" in
                PWD|pwd)
                    new_folder="$PWD"
                ;;
                *)
                    new_folder="$1"
                ;;
                esac
            ;;
            esac
        fi
        shift
    done


    if [[ $new_folder != "" ]]
    then
        folder="$new_folder/$name"
    else
        folder="${originalFile%/*}"
        folder="${folder}/$name"
    fi

    if [[ -w "${folder%/*}" ]]
    then
        mkdir "$folder" &>/dev/null
    fi

    if [[ -d "${folder}" ]]
    then
        cd "$folder"
        palette="${folder}/palette.png"
        filters="fps=$fps,scale=$scale:-1:flags=lanczos"
        out_file="${folder}/${name}.gif"

        if [[ -f $out_file ]]
        then
            counter=1
            out_new="${out_file%.*} ($counter).gif"
            while [[ -f $out_new ]]
            do
                ((counter++))
                out_new="${out_file%.*} ($counter).gif"
            done
            out_file="$out_new"
        fi


        echo -e "\nFolder:\n$PWD\n\nNew GIF:\n$out_file\n"

        if [[ $start_time = 0 && $duration = 0 ]]
        then
            ffmpeg -v warning -i "$originalFile" -vf "$filters,palettegen=stats_mode=$stats_mode" -y $palette
            ffmpeg -v warning -i "$originalFile" -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y "$out_file" && rm "$palette"
        elif [[ $start_time > 0 && $duration = 0 ]]
        then
            ffmpeg -v warning -ss $start_time -i "$originalFile" -vf "$filters,palettegen=stats_mode=$stats_mode" -y $palette
            ffmpeg -v warning -ss $start_time -i "$originalFile" -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y "$out_file" && rm "$palette"
        elif [[ $start_time > 0 && $duration > 0 ]]
        then
            ffmpeg -v warning -ss $start_time -t $duration -i "$originalFile" -vf "$filters,palettegen=stats_mode=$stats_mode" -y $palette
            ffmpeg -v warning -ss $start_time -t $duration -i "$originalFile" -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y "$out_file" && rm "$palette"
        fi
    fi
fi
